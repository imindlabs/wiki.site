{"/dev/os/windows/1_windows10/": {
    "title": "1. Windows 10",
    "keywords": "windows",
    "url": "/dev/os/windows/1_windows10/",
    "body": "Windows 10 is the latest operating system developed by Microsoft, succeeding Windows 8. It combines the familiar features of Windows 7 with the modern design elements of Windows 8, offering a more cohesive and user-friendly experience. Windows 10 introduces a range of enhancements, including the return of the Start Menu, integration of virtual assistant Cortana, improved security features such as Windows Defender, enhanced multitasking capabilities with virtual desktops, and compatibility with a wide range of devices including PCs, tablets, and smartphones. It also provides regular updates and support, ensuring users have access to the latest features and security patches. Overall, Windows 10 aims to provide a seamless and intuitive computing experience for both consumers and enterprise users. 1. Key Highlights 1. Start Menu Revival: Windows 10 brings back the Start Menu with a blend of the classic Windows 7 layout and Windows 8’s Live Tiles. This provides users with a familiar yet modern interface. 2. Cortana Integration: Microsoft’s virtual assistant, Cortana, is integrated into Windows 10, offering voice commands, reminders, and search functionalities to enhance productivity. 3. Microsoft Edge Browser: Windows 10 introduces Edge, a modern web browser designed to replace Internet Explorer, featuring enhanced performance, security, and compatibility with modern web standards. 4. Virtual Desktops: Users can create multiple virtual desktops to manage and organize open applications, improving workflow and multitasking capabilities. 5. Action Center: This feature provides a centralized location for notifications and quick access to settings, improving user awareness and control over their system. 6. Universal Apps: Windows 10 supports universal apps that run across all devices in the Windows ecosystem, including PCs, tablets, and smartphones, ensuring a consistent user experience. 7. Continuum Mode: This feature allows devices to switch between desktop and tablet modes seamlessly, optimizing the interface based on the type of device and its usage. 8. Enhanced Security: Windows 10 includes Windows Hello, a biometric authentication system, and improved security features such as Device Guard and Secure Boot to protect against modern threats. 9. DirectX 12: For gamers, Windows 10 includes DirectX 12, which offers improved performance and graphics capabilities, making it a significant upgrade for gaming. 10. Windows Update for Business: This feature provides IT administrators with more control over the deployment of updates, allowing for phased rollouts and scheduled maintenance. 2. Technical Aspects Windows 10 offers a range of features and improvements that enhance user experience, security, and productivity. For IT professionals, understanding the deployment, security, and management capabilities of Windows 10 is crucial for effectively supporting and optimizing enterprise environments. By leveraging these technical aspects, IT teams can ensure a smooth transition to Windows 10 and maintain robust, secure, and efficient IT infrastructure. 1. Deployment and Migration: Windows Imaging and Configuration Designer (ICD): Used to create and deploy custom images of Windows 10. Windows Autopilot: A set of technologies to simplify and automate device setup and configuration. 2. Group Policy Management: Advanced Group Policy settings: Manage security, applications, and user settings. Administrative Templates: Configure various settings for Windows components. 3. Windows Update Management: Windows Update for Business: Control update deployment, defer feature updates, and manage update rollouts. WSUS (Windows Server Update Services): Centralized update management for enterprise environments. 4. Security Features: Windows Defender Advanced Threat Protection (ATP): Provides robust threat detection and response capabilities. BitLocker: Full disk encryption to protect data on lost or stolen devices. Credential Guard: Uses virtualization-based security to protect credential information. 5. Networking: DirectAccess and VPN: Simplified remote access solutions. Wi-Fi Sense: Facilitates easier connection to Wi-Fi networks but requires careful configuration to avoid security risks. 6. Device Management: Microsoft Intune: Cloud-based service for managing devices and applications. Mobile Device Management (MDM): Manage a range of devices from a unified interface. 7. Hyper-V: Virtualization Platform: Allows running virtual machines on Windows 10. Containers: Support for Windows containers and Docker for modern application deployment. 8. PowerShell: Automation: Use PowerShell scripts to automate administrative tasks. Remoting: Manage remote systems through PowerShell, providing powerful management capabilities. 9. Windows Subsystem for Linux (WSL): Run Linux Distros: Allows IT professionals to run native Linux command-line tools directly on Windows. Development Environment: Provides a seamless development environment for cross-platform applications. 10. Compatibility and Legacy Support: - Application Compatibility Toolkit (ACT): Helps to identify and mitigate application compatibility issues. - Enterprise Mode: Allows legacy web apps to run in Internet Explorer mode within Edge. 3. Sharing Internet This guide demonstrates how to share an internet connection from one computer to another using an Ethernet or LAN cable. It covers two methods using built-in features in Windows. 3.1 Method 1: Using Bridge Connections 1. Connect Host PC to Wi-Fi: Ensure the host computer is connected to a Wi-Fi network. 2. Open Network Connections: Access the network connections page on the host PC. 3. Setup Network Bridge: Select both the Wi-Fi and Ethernet network adapters. Right-click on the Wi-Fi adapter and select “Bridge Connections”. Right-click the newly created bridge adapter and select “Properties”. Ensure both Ethernet and Wi-Fi options are checked and click “OK”. 4. Connect Client PC: Use an Ethernet or LAN cable to connect the host PC to the client PC. 5. Verify Connection: The client PC should show an Ethernet icon in the taskbar, indicating a successful connection to the internet. 3.2 Method 2: Using Internet Connection Sharing (ICS) 1. Disconnect Network Bridge: If previously set, remove the network adapters from the bridge connection. 2. Connect Host and Client PCs: Ensure the host and client computers are connected via an Ethernet cable. 3. Configure Wi-Fi Adapter on Host PC: Right-click the Wi-Fi adapter and select “Properties”. Navigate to the “Sharing” tab. Check the box next to “Allow other network users to connect through this computer’s internet connection”. Under “Home networking connection”, select “Ethernet”. 4. Set Static IP Addresses: Due to potential issues with DHCP, it’s advisable to set private static IP addresses. On the host computer, right-click the Ethernet adapter and assign static IP addresses. Assign corresponding static IP addresses on the client computer. 5. Verify Internet Access: The client device should now have access to the internet. Software Purchase Grey Market https://consogame.com/software/windows/microsoft-windows-10-professional https://www.g2a.com/ https://www.scdkey.com/ https://www.cdkeys.com/ https://www.vip-scdkey.com/key/p202103081052146250.html https://www.bobkeys.com/software/p201609081840431227.html"
  },"/dev/os/windows/2_windows_server2019/": {
    "title": "2. Windows Server 2019",
    "keywords": "windows",
    "url": "/dev/os/windows/2_windows_server2019/",
    "body": "Content is Coming Soon… 1. Active Directory Active Directory (AD) is a directory service developed by Microsoft for Windows domain networks. It is included in most Windows Server operating systems. Active Directory stores information about objects on a network and makes this information available to users and network administrators. Here are the key components and functions of Active Directory: Directory Services: Active Directory stores information about users, computers, groups, and other resources on the network in a hierarchical, centralized database called the Active Directory Domain Services (AD DS) database. Domain Controller: A domain controller (DC) is a server that runs the Active Directory Domain Services role. It authenticates and authorizes all users and computers in a Windows domain, assigning and enforcing security policies for all computers and installing or updating software. Domains and Domain Trees: Active Directory organizes objects in a hierarchical structure called a domain. Domains can be grouped together to form domain trees, which can further be grouped into forests. Each domain in a forest maintains a two-way transitive trust relationship with every other domain in the forest, allowing users in one domain to access resources in another. User Authentication and Authorization: Active Directory authenticates and authorizes users and computers when they log in to the network. It verifies the identity of users and ensures they have the necessary permissions to access network resources. Group Policy: Active Directory uses Group Policy to define and enforce security settings and configurations for users and computers. Group Policy allows administrators to centrally manage and configure settings for all computers and users in a domain. LDAP Directory Services: Active Directory is based on the Lightweight Directory Access Protocol (LDAP), which provides a standardized way to access directory services. This allows applications and services to query and update information stored in Active Directory. DNS Integration: Active Directory relies heavily on Domain Name System (DNS) for name resolution. DNS is used to locate domain controllers, locate other services, and resolve domain names to IP addresses. Overall, Active Directory plays a critical role in managing and securing Windows-based networks, providing centralized authentication, authorization, and directory services to users and administrators. 2. Group Policy"
  },"/dev/os/windows/3.1_mingw/": {
    "title": "3.1. MinGW",
    "keywords": "windows",
    "url": "/dev/os/windows/3.1_mingw/",
    "body": "Content is Coming Soon…"
  },"/dev/os/windows/3.2_cygwin/": {
    "title": "3.2. Cygwin",
    "keywords": "windows",
    "url": "/dev/os/windows/3.2_cygwin/",
    "body": "Content is Coming Soon…"
  },"/dev/os/windows/3_wsl/": {
    "title": "3. Linux for Windows (WSL)",
    "keywords": "windows",
    "url": "/dev/os/windows/3_wsl/",
    "body": "Content is Coming Soon…"
  },"/dev/os/vmmachine/1_vmworkstation/": {
    "title": "1. VM Workstation",
    "keywords": "vmmachine",
    "url": "/dev/os/vmmachine/1_vmworkstation/",
    "body": "Content is Coming Soon…"
  },"/dev/os/vmmachine/2_windows_hyper_v/": {
    "title": "2. Windows Hyper-V",
    "keywords": "vmmachine",
    "url": "/dev/os/vmmachine/2_windows_hyper_v/",
    "body": "1 VMware overview VMware is a company that offers a range of virtualization products, such as VMware Workstation, VMware Fusion, VMware Server, and VMware ESXi. VMware Workstation and Fusion are desktop applications that let you create and run virtual machines on your Windows or Mac OS. VMware Server and ESXi are server applications that let you host multiple virtual machines on a single physical server. VMware is known for its reliability, performance, and compatibility with various operating systems and hardware. 2 Hyper-V overview Hyper-V is a virtualization feature that is built into Windows Server and Windows 10. Hyper-V lets you create and manage virtual machines using a graphical interface or a command-line tool. Hyper-V is designed to integrate well with other Windows features, such as Active Directory, PowerShell, and Remote Desktop. Hyper-V is also compatible with Linux and other operating systems, but may require some additional configuration. 3 Pros of VMware One of the main advantages of VMware is its wide support for different operating systems, including Windows, Linux, Mac OS, Solaris, FreeBSD, and more. VMware also has a large and active community of users and developers, who provide helpful resources, documentation, and support. VMware also offers advanced features, such as snapshots, cloning, live migration, and high availability, that can enhance your virtualization experience. VMware is also considered to be more stable and secure than Hyper-V, as it has fewer bugs and vulnerabilities. 4 Cons of VMware One of the main drawbacks of VMware is its cost. VMware products are not free, and you may need to purchase licenses, subscriptions, or support plans to use them. VMware also requires more resources than Hyper-V, as it runs on top of an existing operating system, rather than being part of it. VMware also has some compatibility issues with certain hardware and drivers, which may affect your performance or functionality. 5 Pros of Hyper-V One of the main benefits of Hyper-V is its affordability. Hyper-V is free for Windows Server and Windows 10 users, and you do not need to pay any extra fees to use it. Hyper-V also has a lower overhead than VMware, as it runs as a part of the Windows kernel, rather than as a separate application. Hyper-V also has some advantages over VMware in terms of integration with other Windows features, such as networking, security, and management. 6 Cons of Hyper-V One of the main disadvantages of Hyper-V is its limited support for non-Windows operating systems. Hyper-V may not work well with some Linux distributions or other operating systems, and you may need to install additional drivers or tools to make them run smoothly. Hyper-V also has a smaller and less active community than VMware, which means you may have less access to resources, documentation, and support. Hyper-V also lacks some of the advanced features that VMware offers, such as snapshots, cloning, and live migration."
  },"/dev/os/docker/3_dcfd_1_docker/": {
    "title": "1. Fundamentals",
    "keywords": "docker",
    "url": "/dev/os/docker/3_dcfd_1_docker/",
    "body": "1. Docker vs Virtual Machines? Docker and virtual machines (VMs) are both technologies used to create isolated environments for running applications, but they have fundamental differences in terms of architecture, performance, and usage. Here’s a detailed comparison: 1.1 Architecture Virtual Machines: VMs run on a hypervisor, which can be either Type 1 (bare-metal) or Type 2 (hosted). Each VM includes a full operating system (OS) instance, which means that every VM has its own kernel and set of system libraries. VMs are more heavyweight due to the need for separate OS instances and the overhead of the hypervisor. Docker: Docker uses containerization technology, which leverages the host OS kernel. Containers share the host OS kernel and use isolated user spaces, making them much lighter than VMs. Docker containers package applications and their dependencies but do not include a full OS, just the necessary libraries and binaries. 1.2 Performance Virtual Machines: VMs are more resource-intensive because they require more CPU, memory, and storage to run multiple full OS instances. The hypervisor adds a layer of overhead, which can impact performance. Docker: Containers are more lightweight and efficient because they share the host OS kernel. Startup times for containers are typically much faster compared to VMs. Docker can achieve higher density of applications on the same hardware compared to VMs. 1.3 Isolation Virtual Machines: VMs provide strong isolation because each VM runs a completely separate OS instance. This isolation is more secure but at the cost of higher resource usage. Docker: Containers provide process-level isolation using namespaces and control groups (cgroups) in the Linux kernel. While still secure, container isolation is generally considered to be less strong than VM isolation since they share the same kernel. 1.4 Portability Virtual Machines: VMs are portable across different physical machines and can be migrated easily using tools provided by hypervisor vendors. Portability can be limited by differences in the underlying hardware and hypervisor features. Docker: Docker containers are highly portable and can run on any system that supports Docker, regardless of the underlying hardware or OS. Docker images can be easily shared and deployed across different environments using Docker Hub or private registries. 1.5 Use Cases Virtual Machines: Running multiple different operating systems on a single physical machine. Providing strong isolation for applications that require high security. Legacy applications that require a specific OS environment. Docker: Microservices architecture and modern application development. Continuous Integration/Continuous Deployment (CI/CD) pipelines. Applications that need to be lightweight, scalable, and portable. Summary Aspect Virtual Machines Docker Containers Architecture Full OS instance per VM Shared OS kernel Resource Usage High Low Performance Slower startup, higher overhead Fast startup, low overhead Isolation Stronger isolation Process-level isolation Portability Limited by hypervisor Highly portable Use Cases Multi-OS environments, strong security Microservices, CI/CD, scalability Both Docker and virtual machines have their own strengths and are suitable for different scenarios. Understanding these differences can help in choosing the right technology for a given use case. 2. What is a hypervisor? A hypervisor, also known as a virtual machine monitor (VMM), is software, firmware, or hardware that creates and manages virtual machines (VMs) by allowing multiple operating systems to share a single hardware host. Each operating system or virtual machine appears to have the host’s processor, memory, and other resources all to itself, but the hypervisor is actually controlling the host processor and resources, allocating what is needed to each operating system, and making sure that the guest operating systems (guest VMs) cannot disrupt each other. 2.1 Types of Hypervisors There are two main types of hypervisors: Type 1 Hypervisors (Bare-Metal Hypervisors): These hypervisors run directly on the host’s hardware to control the hardware and to manage guest operating systems. They do not require a separate underlying operating system. Examples include VMware ESXi, Microsoft Hyper-V, and Xen. Type 2 Hypervisors (Hosted Hypervisors): These hypervisors run on a conventional operating system (OS) just as other computer programs do. The guest operating system runs as a process on the host. Examples include VMware Workstation, Oracle VirtualBox, and Parallels Desktop. 2.2 Functions of a Hypervisor Resource Allocation: Hypervisors allocate resources like CPU, memory, storage, and network to each VM. Isolation: They provide isolation between VMs to ensure that the operation of one VM does not affect others. Virtual Hardware Emulation: Hypervisors emulate virtual hardware devices for VMs, allowing VMs to use abstracted hardware resources. VM Management: They provide tools and interfaces for creating, managing, and monitoring VMs. Migration: Hypervisors allow for live migration of VMs between hosts without downtime, which is useful for load balancing and maintenance. 2.3 Advantages of Using Hypervisors Consolidation: Multiple VMs can run on a single physical machine, improving hardware utilization. Isolation: Each VM operates independently, providing strong isolation for different workloads or tenants. Scalability: New VMs can be quickly created and deployed to scale applications. Flexibility: Different operating systems can be run on the same hardware platform. Disaster Recovery: Hypervisors can help in creating snapshots and backups of VMs, aiding in disaster recovery. 2.4 Disadvantages of Using Hypervisors Performance Overhead: Running multiple VMs on the same hardware can introduce performance overhead due to resource sharing and virtualization. Complexity: Managing a virtualized environment can be complex and may require specialized skills and tools. Security Risks: While hypervisors provide isolation, vulnerabilities in the hypervisor itself can potentially lead to security risks affecting all VMs. 2.5 Examples of Hypervisors Type 1 (Bare-Metal): VMware ESXi Microsoft Hyper-V Xen KVM (Kernel-based Virtual Machine) Type 2 (Hosted): VMware Workstation Oracle VirtualBox Parallels Desktop QEMU (Quick Emulator) IMPORTANT Hypervisors are fundamental to modern cloud computing, enabling the efficient use of hardware resources and the flexible deployment of virtualized workloads. 3. Docker on Windows (Installation) Docker Desktop is a crucial tool for developers looking to containerize applications. The video from the Docker Mastery course offers a detailed walkthrough, now shared on YouTube for broader accessibility. Below are the steps and recommendations from the course for setting up Docker Desktop on Windows 10 or 11. 1. Downloading and Installing Docker Desktop Visit the Docker Desktop download page and download the installer. Run the executable to start the installation process. 2. Enabling WSL 2 Docker Desktop now uses WSL 2, a more efficient way to run Linux on Windows compared to the older Hyper-V setup. During installation, enable WSL 2 if it isn’t already enabled. The installer will guide you through this, including installing the necessary Linux kernel update. 3. Post-Installation Configuration After installation, launch Docker Desktop and follow the setup wizard. Agree to the End User License Agreement (EULA). Docker Desktop is free for learning and personal use, though some enterprise features may require a paid license. 4. Setting Up Visual Studio Code Download Visual Studio Code from its official website. Install Docker and Kubernetes extensions within Visual Studio Code for enhanced functionality. 5. Adjusting Docker Desktop Settings Access Docker Desktop settings by right-clicking the Docker icon in the system tray and selecting “Settings”. Configure your preferred settings, especially under the WSL integration section. Ensure your Linux distributions (e.g., Ubuntu) are enabled for Docker. 6. Creating a Docker ID Create a free Docker ID at hub.docker.com. Log in to Docker Desktop with your Docker ID to increase your pull rate limit from Docker Hub. 7. Cloning the Course Repository Clone the course repository into your WSL file system for better performance: git clone &lt;repository_url&gt; Using Windows Terminal (not recommended) Windows Terminal provides a modern interface for managing your command-line tools, supporting PowerShell, Command Prompt, and WSL distributions. Download it from the Microsoft Store if you’re on Windows 10, or use the pre-installed version on Windows 11. Customize the terminal to set your default profile to WSL for a seamless Docker experience. RECOMMENDED Use WSL2 distribution like Ubuntu to access docker instead of docker desktop or Windows terminal Troubleshooting Tips Virtualization Errors: Ensure CPU virtualization features (VT-x) are enabled in your BIOS. Pull Rate Limits: Log in with your Docker ID to avoid hitting free-tier limits on Docker Hub. 4. Docker CLI Cheat Sheet Docker provides the ability to package and run an application in a loosely isolated environment called a container. The isolation and security allows you to run many containers simultaneously on a given host. Containers are lightweight and contain everything needed to run the application, so you do not need to rely on what is currently installed on the host. You can easily share containers while you work, and be sure that everyone you share with gets the same container that works in the same way. Download Cheat Sheet"
  },"/dev/os/docker/3_dcfd_2_workflow/": {
    "title": "2. Workflow",
    "keywords": "docker",
    "url": "/dev/os/docker/3_dcfd_2_workflow/",
    "body": "1. Creating a Docker Container Creating a Docker container that runs a Unix shell is straightforward and a common use case. Docker containers can run any process, including a shell, provided that the necessary binaries and libraries are included in the container image. Here’s a step-by-step guide on how to create and run a Docker container with a Unix shell: Step 1: Install Docker Ensure Docker is installed on your system. You can download and install Docker from the official Docker website. Step 2: Choose a Base Image Docker images are built from base images, which can include various Linux distributions. Common choices for Unix shell environments include: alpine: A minimal Docker image based on Alpine Linux. ubuntu: A more full-featured Docker image based on Ubuntu. Step 3: Create a Dockerfile A Dockerfile is a script that contains instructions on how to build a Docker image. Below are examples of Dockerfiles for both Alpine Linux and Ubuntu: Dockerfile for Alpine Linux # Use the official Alpine Linux image FROM alpine:latest # Install Bash shell RUN apk add --no-cache bash # Set the default command to run Bash CMD [\"bash\"] Dockerfile for Ubuntu # Use the official Ubuntu image FROM ubuntu:latest # Install Bash shell RUN apt-get update &amp;&amp; apt-get install -y bash # Set the default command to run Bash CMD [\"bash\"] Step 4: Build the Docker Image Navigate to the directory containing your Dockerfile and build the Docker image using the docker build command: # For Alpine Linux docker build -t alpine-bash . # For Ubuntu docker build -t ubuntu-bash . The -t flag tags the image with a name (alpine-bash or ubuntu-bash). Step 5: Run the Docker Container Once the image is built, you can run a container from the image using the docker run command: # For Alpine Linux docker run -it alpine-bash # For Ubuntu docker run -it ubuntu-bash The -it flags make the container interactive and allocate a pseudo-TTY, allowing you to interact with the shell. 1.1 Example: Running an Alpine Linux Shell Here’s a complete example of creating and running an Alpine Linux shell in a Docker container: Create a directory and a Dockerfile: mkdir alpine-shell cd alpine-shell nano Dockerfile Add the following content to the Dockerfile: FROM alpine:latest RUN apk add --no-cache bash CMD [\"bash\"] Build the Docker image: docker build -t alpine-bash . Run the Docker container: docker run -it alpine-bash You will now be inside a Bash shell running in an Alpine Linux container. 1.2 Additional Tips Persisting Data: If you need to persist data, you can mount a volume using the -v flag: docker run -it -v /host/path:/container/path alpine-bash Networking: You can connect the container to a network using the --network flag: docker run -it --network=my-network alpine-bash Custom Commands: You can override the default command to run custom scripts or commands: docker run -it alpine-bash sh -c \"echo 'Hello, World!'\" IMPORTANT Docker makes it easy to package and distribute environments, including Unix shells, ensuring consistency and isolation from the host system. 2. Docker with Ubuntu vs Ubuntu VM? Docker provides the functionality of different operating systems, like Ubuntu, without running a full guest OS by leveraging a few key concepts and technologies. Here’s how Docker manages to provide the same functionalities using an Ubuntu image without installing the entire Ubuntu operating system: 2.1 Key Concepts and Technologies Containers vs. Virtual Machines: Virtual Machines (VMs): Each VM includes a full operating system along with the application and its dependencies, running on a hypervisor. This means each VM has its own kernel and OS resources. Containers: Containers, on the other hand, share the host system’s kernel and only include the application and its dependencies. Containers run as isolated processes on the host OS, using its kernel but maintaining their own filesystem, network, and process space. Union File Systems and Docker Layers: Docker images are built in layers. Each instruction in a Dockerfile creates a new layer. These layers are stacked and form a union filesystem, which means that the image only contains the necessary parts of the OS to run the application. For an Ubuntu image, this includes the necessary binaries, libraries, and tools that are part of the Ubuntu userland, but not the kernel. Namespaces and Cgroups: Namespaces: Provide isolated environments within the same OS instance. This includes process isolation (PID namespace), user isolation (user namespace), file system isolation (mount namespace), etc. Control Groups (Cgroups): Manage and limit resource usage (CPU, memory, disk I/O, etc.) of the containerized applications. Docker Images: When you pull an Ubuntu Docker image from Docker Hub, it includes the Ubuntu filesystem (binaries, libraries, etc.) but without the Ubuntu kernel. It relies on the host’s kernel to function. This means the image has everything needed to provide the “Ubuntu experience” (such as the apt package manager, bash shell, common utilities, etc.) without the overhead of a full OS. 2.2 Example of How an Ubuntu Image Works in Docker When you run an Ubuntu container, Docker uses the host OS kernel and provides the container with the Ubuntu filesystem: Download the Ubuntu Image: docker pull ubuntu Run the Ubuntu Container: docker run -it ubuntu Inside the container, you can run commands just like you would on a full Ubuntu system: root@container_id:/# ls bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var You can use apt-get to install software, navigate the filesystem, and perform other tasks as if you were on an Ubuntu machine. 2.3 How Docker Achieves This File System: The Ubuntu Docker image contains a minimal root filesystem that replicates the Ubuntu environment. This includes directories like /bin, /etc, /lib, /usr, etc., filled with the usual tools and libraries. Process Management: Docker containers run as isolated processes on the host system. The host’s kernel manages these processes, providing the necessary system calls and resource management. User Space Tools: The tools and applications you use within the container are from the Ubuntu user space. These tools are packaged in the Docker image, enabling you to interact with the container as if it were a standalone Ubuntu system. IMPORTANT Docker containers simulate a full OS environment by packaging the userland components (binaries, libraries, tools) of that OS while relying on the host’s kernel. This approach allows Docker to provide lightweight, efficient, and isolated environments that mimic the functionalities of a complete OS without the overhead of a full VM. 3. Docker Basics 3.1 Docker Crash Course Pulled docker images are stored in? Here is a list of the storage locations of the docker images on different operating systems: Ubuntu: /var/lib/docker/ Fedora: /var/lib/docker/ Debian: /var/lib/docker/ Windows: C:\\ProgramData\\DockerDesktop. MacOS: ~/Library/Containers/com. docker. docker/Data/vms/0/ 3.2 Docker Intermediate 3.3 Docker Advance You can enter a running container with: docker exec -it my_new_container /bin/bash you can replace bash with sh if bash is not available in the container. to attach to a running container later, use -a / –attach option: docker start -a my_new_container and if you need to explicitly use a UID , like root = UID 0, you can specify this: docker exec -it -u 0 my_new_container /bin/bash which will log you as root"
  },"/dev/os/iotplatform/1_tensorboard/": {
    "title": "1. Home Assistant",
    "keywords": "iotplatform",
    "url": "/dev/os/iotplatform/1_tensorboard/",
    "body": "Content is Coming Soon…"
  }}
