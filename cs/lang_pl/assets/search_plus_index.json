{"/cs/lang_pl/plevolution/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "plevolution",
    "url": "/cs/lang_pl/plevolution/1_basics/",
    "body": ""
  },"/cs/lang_pl/fortran/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "fortran",
    "url": "/cs/lang_pl/fortran/1_basics/",
    "body": "1. Characteristics of Fortran77 Fortran 77 is a significant version of the Fortran programming language, which introduced several features and improvements over its predecessor, Fortran 66. Here are the key characteristics of Fortran 77: 1. Fixed-Form Source Code Fortran 77 uses fixed-form source code format, where specific columns in the code have particular meanings. For example, columns 1-5 are used for statement labels, column 6 for continuation characters, and columns 7-72 for code. 2. Implicit Typing Variables starting with the letters I through N are implicitly integers, while all other variables are implicitly real numbers, unless explicitly declared otherwise. The IMPLICIT NONE statement can be used to disable implicit typing, forcing all variables to be explicitly declared. 3. Improved Control Structures Fortran 77 introduced the IF-THEN-ELSE construct for more readable and flexible conditional branching. The DO loop construct was enhanced, allowing more complex looping structures. 4. Data Types Fortran 77 supports basic data types: INTEGER, REAL, DOUBLE PRECISION, COMPLEX, LOGICAL, and CHARACTER. The CHARACTER data type was introduced, enabling better handling of strings. 5. Array Handling Fortran 77 allows multi-dimensional arrays, enhancing the language’s capability to handle mathematical and scientific computations involving matrices and tensors. 6. COMMON Blocks COMMON blocks in Fortran 77 allow sharing of variables between program units (such as the main program and subroutines). This feature enables global variables and facilitates modular programming. 7. Intrinsic Functions Fortran 77 includes a rich set of intrinsic functions for mathematical operations, character manipulation, and logical operations. Examples include SIN, COS, LOG, EXP, SQRT, ABS, and LEN. 8. Portability Fortran 77 code is highly portable across different computing platforms, which was a significant improvement over Fortran 66. This standardization helped in the widespread adoption of the language in scientific computing. 9. Formatted and Unformatted I/O Fortran 77 provides comprehensive input/output (I/O) capabilities, including both formatted and unformatted I/O operations. The READ, WRITE, and FORMAT statements allow detailed control over data input and output. 10. Subroutines and Functions Fortran 77 supports the use of subroutines and functions to promote code reuse and modularity. Subroutines are defined using the SUBROUTINE keyword, and functions using the FUNCTION keyword. Example Code Here is a simple example of a Fortran 77 program that demonstrates some of its features: PROGRAM HelloWorld PRINT *, 'Hello, World!' END Example with Control Structures and Arrays PROGRAM ArrayExample INTEGER I, N PARAMETER (N=5) REAL A(N), B(N) ! Initialize arrays DO 10 I = 1, N A(I) = I B(I) = A(I) * A(I) 10 CONTINUE ! Print results PRINT *, 'Array A:', A PRINT *, 'Array B:', B END Explanation The program defines two arrays, A and B, each of size N (which is set to 5). It initializes the array A with values 1 through 5 and computes the square of each element, storing the results in array B. Finally, it prints the contents of both arrays. IMPORTANT Fortran 77 played a crucial role in the evolution of Fortran, providing a solid foundation for scientific and numerical computing with its array handling, control structures, and intrinsic functions. Despite its limitations, it remains an important version of the language, particularly for legacy scientific and engineering codebases. 2. Limitations Fortran 77, while a significant advancement in the Fortran language, also has several downsides and limitations. Here are some of the key disadvantages: 1. Fixed-Form Source Code Column Dependency: The fixed-form source code format is rigid and prone to errors. For example, specific columns have designated purposes, and accidental misalignment can lead to syntax errors. Line Length: Code lines are limited to 72 characters, which can lead to cumbersome code formatting and the need for continuation lines. 2. Limited Modern Programming Constructs No Dynamic Memory Allocation: Fortran 77 does not support dynamic memory allocation. All arrays and variables must have fixed sizes defined at compile time, which limits flexibility in handling data of varying sizes. No Recursive Procedures: Fortran 77 does not support recursive procedures, which are essential for many modern algorithms and programming techniques. 3. Lack of Modular Programming Features No Modules: Fortran 77 does not have modules, making it difficult to encapsulate and organize code. Instead, it relies heavily on COMMON blocks, which can lead to namespace pollution and make code maintenance challenging. No Derived Types: The language does not support user-defined data types (derived types), limiting the ability to create complex data structures. 4. Primitive Error Handling Fortran 77 has very basic error handling capabilities. There are no sophisticated mechanisms for catching and handling runtime errors, which can make debugging and developing robust applications more difficult. 5. Limited String Handling String manipulation capabilities in Fortran 77 are quite limited compared to modern languages. The CHARACTER data type was introduced in Fortran 77, but string operations are still cumbersome and less powerful. 6. Verbosity and Readability Fortran 77 code tends to be verbose, making it harder to read and write compared to more modern programming languages. The syntax can be less intuitive, especially for new programmers. 7. No Built-In Support for Parallelism While Fortran is used extensively in high-performance computing, Fortran 77 does not have built-in support for parallel programming. Extensions like MPI and OpenMP must be used to achieve parallelism, which can add complexity. 8. Poor Standard Library Support The standard library in Fortran 77 is minimal, offering limited built-in functions and utilities. This lack of extensive libraries can make it harder to perform common tasks without writing substantial amounts of code from scratch. 9. Maintenance and Portability Issues Due to its age and the evolution of programming practices, maintaining and updating Fortran 77 code can be challenging. Porting legacy Fortran 77 code to more modern systems or integrating it with contemporary software can also be problematic. Example Illustrating Some Downsides Here is a simple example highlighting the fixed-form layout and the limitations in handling dynamic arrays: PROGRAM Example INTEGER A(10), B(10) INTEGER I DO 10 I = 1, 10 A(I) = I B(I) = A(I) * A(I) 10 CONTINUE PRINT *, 'Array A:', A PRINT *, 'Array B:', B END Downsides Illustrated Fixed-Form Layout: The strict column-based format and the need for continuation lines can make the code less readable and more error-prone. No Dynamic Arrays: The arrays A and B must have fixed sizes defined at compile time, limiting flexibility. IMPORTANT While Fortran 77 was a significant step forward for numerical and scientific computing at its time, it has notable limitations and downsides by today’s standards. These include its rigid syntax, lack of modern programming constructs, and limited error handling and string manipulation capabilities. As a result, more recent versions of Fortran and other modern programming languages have largely supplanted Fortran 77 in many areas."
  },"/cs/lang_pl/fortran/1_programs/": {
    "title": "2. Programs",
    "keywords": "fortran",
    "url": "/cs/lang_pl/fortran/1_programs/",
    "body": "1. Hello World Program program HelloWorld print *, 'Hello, World!' end program HelloWorld To compile and run this program, you can use a Fortran compiler like gfortran. Save the code in a file with a .f90 extension, for example, helloworld.f90, and then use the following commands in your terminal: gfortran -o helloworld helloworld.f90 ./helloworld This will compile the Fortran code and execute the resulting program, displaying the message “Hello, World!” on the screen. 2. COMMON keyword In Fortran 77, the COMMON keyword is used to define and share variables among different program units (such as functions, subroutines, or the main program). This allows for global variables that can be accessed and modified by multiple parts of the program. Here is an example to illustrate the use of the COMMON keyword in Fortran 77: Example PROGRAM Main COMMON /SharedVars/ A, B, C A = 1.0 B = 2.0 C = 3.0 CALL PrintSharedVars END SUBROUTINE PrintSharedVars COMMON /SharedVars/ A, B, C PRINT *, 'A = ', A PRINT *, 'B = ', B PRINT *, 'C = ', C END Explanation Main Program: The COMMON /SharedVars/ A, B, C statement declares a common block named SharedVars that includes the variables A, B, and C. The variables A, B, and C are assigned values 1.0, 2.0, and 3.0 respectively. The CALL PrintSharedVars statement calls the subroutine PrintSharedVars. Subroutine PrintSharedVars: The COMMON /SharedVars/ A, B, C statement declares the same common block SharedVars and the same variables A, B, and C. The PRINT * statements print the values of A, B, and C. Compilation and Execution Save the code in a file with a .f extension, for example, common_example.f, and then use the following commands in your terminal: gfortran -o common_example common_example.f ./common_example The output will be: A = 1.000000 B = 2.000000 C = 3.000000 This demonstrates that the variables A, B, and C are shared between the main program and the subroutine through the common block SharedVars."
  },"/cs/lang_pl/algol/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "algol",
    "url": "/cs/lang_pl/algol/1_basics/",
    "body": ""
  },"/cs/lang_pl/functional/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "functional",
    "url": "/cs/lang_pl/functional/1_basics/",
    "body": ""
  },"/cs/lang_pl/logical/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "logical",
    "url": "/cs/lang_pl/logical/1_basics/",
    "body": ""
  },"/cs/lang_pl/scripting/1_basics/": {
    "title": "1. Fundamentals",
    "keywords": "scripting",
    "url": "/cs/lang_pl/scripting/1_basics/",
    "body": "Characteristics of Fortran77 Fortran 77 is a significant version of the Fortran programming language, which introduced several features and improvements over its predecessor, Fortran 66. Here are the key characteristics of Fortran 77: 1. Fixed-Form Source Code Fortran 77 uses fixed-form source code format, where specific columns in the code have particular meanings. For example, columns 1-5 are used for statement labels, column 6 for continuation characters, and columns 7-72 for code. 2. Implicit Typing Variables starting with the letters I through N are implicitly integers, while all other variables are implicitly real numbers, unless explicitly declared otherwise. The IMPLICIT NONE statement can be used to disable implicit typing, forcing all variables to be explicitly declared. 3. Improved Control Structures Fortran 77 introduced the IF-THEN-ELSE construct for more readable and flexible conditional branching. The DO loop construct was enhanced, allowing more complex looping structures. 4. Data Types Fortran 77 supports basic data types: INTEGER, REAL, DOUBLE PRECISION, COMPLEX, LOGICAL, and CHARACTER. The CHARACTER data type was introduced, enabling better handling of strings. 5. Array Handling Fortran 77 allows multi-dimensional arrays, enhancing the language’s capability to handle mathematical and scientific computations involving matrices and tensors. 6. COMMON Blocks COMMON blocks in Fortran 77 allow sharing of variables between program units (such as the main program and subroutines). This feature enables global variables and facilitates modular programming. 7. Intrinsic Functions Fortran 77 includes a rich set of intrinsic functions for mathematical operations, character manipulation, and logical operations. Examples include SIN, COS, LOG, EXP, SQRT, ABS, and LEN. 8. Portability Fortran 77 code is highly portable across different computing platforms, which was a significant improvement over Fortran 66. This standardization helped in the widespread adoption of the language in scientific computing. 9. Formatted and Unformatted I/O Fortran 77 provides comprehensive input/output (I/O) capabilities, including both formatted and unformatted I/O operations. The READ, WRITE, and FORMAT statements allow detailed control over data input and output. 10. Subroutines and Functions Fortran 77 supports the use of subroutines and functions to promote code reuse and modularity. Subroutines are defined using the SUBROUTINE keyword, and functions using the FUNCTION keyword. Example Code Here is a simple example of a Fortran 77 program that demonstrates some of its features: PROGRAM HelloWorld PRINT *, 'Hello, World!' END Example with Control Structures and Arrays PROGRAM ArrayExample INTEGER I, N PARAMETER (N=5) REAL A(N), B(N) ! Initialize arrays DO 10 I = 1, N A(I) = I B(I) = A(I) * A(I) 10 CONTINUE ! Print results PRINT *, 'Array A:', A PRINT *, 'Array B:', B END Explanation The program defines two arrays, A and B, each of size N (which is set to 5). It initializes the array A with values 1 through 5 and computes the square of each element, storing the results in array B. Finally, it prints the contents of both arrays. IMPORTANT Fortran 77 played a crucial role in the evolution of Fortran, providing a solid foundation for scientific and numerical computing with its array handling, control structures, and intrinsic functions. Despite its limitations, it remains an important version of the language, particularly for legacy scientific and engineering codebases. 2. Limitations Fortran 77, while a significant advancement in the Fortran language, also has several downsides and limitations. Here are some of the key disadvantages: 1. Fixed-Form Source Code Column Dependency: The fixed-form source code format is rigid and prone to errors. For example, specific columns have designated purposes, and accidental misalignment can lead to syntax errors. Line Length: Code lines are limited to 72 characters, which can lead to cumbersome code formatting and the need for continuation lines. 2. Limited Modern Programming Constructs No Dynamic Memory Allocation: Fortran 77 does not support dynamic memory allocation. All arrays and variables must have fixed sizes defined at compile time, which limits flexibility in handling data of varying sizes. No Recursive Procedures: Fortran 77 does not support recursive procedures, which are essential for many modern algorithms and programming techniques. 3. Lack of Modular Programming Features No Modules: Fortran 77 does not have modules, making it difficult to encapsulate and organize code. Instead, it relies heavily on COMMON blocks, which can lead to namespace pollution and make code maintenance challenging. No Derived Types: The language does not support user-defined data types (derived types), limiting the ability to create complex data structures. 4. Primitive Error Handling Fortran 77 has very basic error handling capabilities. There are no sophisticated mechanisms for catching and handling runtime errors, which can make debugging and developing robust applications more difficult. 5. Limited String Handling String manipulation capabilities in Fortran 77 are quite limited compared to modern languages. The CHARACTER data type was introduced in Fortran 77, but string operations are still cumbersome and less powerful. 6. Verbosity and Readability Fortran 77 code tends to be verbose, making it harder to read and write compared to more modern programming languages. The syntax can be less intuitive, especially for new programmers. 7. No Built-In Support for Parallelism While Fortran is used extensively in high-performance computing, Fortran 77 does not have built-in support for parallel programming. Extensions like MPI and OpenMP must be used to achieve parallelism, which can add complexity. 8. Poor Standard Library Support The standard library in Fortran 77 is minimal, offering limited built-in functions and utilities. This lack of extensive libraries can make it harder to perform common tasks without writing substantial amounts of code from scratch. 9. Maintenance and Portability Issues Due to its age and the evolution of programming practices, maintaining and updating Fortran 77 code can be challenging. Porting legacy Fortran 77 code to more modern systems or integrating it with contemporary software can also be problematic. Example Illustrating Some Downsides Here is a simple example highlighting the fixed-form layout and the limitations in handling dynamic arrays: PROGRAM Example INTEGER A(10), B(10) INTEGER I DO 10 I = 1, 10 A(I) = I B(I) = A(I) * A(I) 10 CONTINUE PRINT *, 'Array A:', A PRINT *, 'Array B:', B END Downsides Illustrated Fixed-Form Layout: The strict column-based format and the need for continuation lines can make the code less readable and more error-prone. No Dynamic Arrays: The arrays A and B must have fixed sizes defined at compile time, limiting flexibility. IMPORTANT While Fortran 77 was a significant step forward for numerical and scientific computing at its time, it has notable limitations and downsides by today’s standards. These include its rigid syntax, lack of modern programming constructs, and limited error handling and string manipulation capabilities. As a result, more recent versions of Fortran and other modern programming languages have largely supplanted Fortran 77 in many areas."
  }}
